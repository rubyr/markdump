---
export const sortOptions = {
    newest: {
        name: 'Newest',
        col: 'created_at',
        ascending: false,
    },
    oldest: {
        name: 'Oldest',
        col: 'created_at',
        ascending: true,
    },
    alpha: {
        name: 'Title (A-Z)',
        col: 'title',
        ascending: true,
    },
    revalpha: {
        name: 'Title (Z-A)',
        col: 'title',
        ascending: false,
    }
}
export type SortType = keyof typeof sortOptions;

export const sortPostQuery = (query:any, sortBy: SortType) => {
    const {col,ascending} = sortOptions[sortBy] ?? sortOptions.newest;
    return query.order(col, { ascending });
}
---

<div class="sortContainer">
    <label for="sort">Sort By</label>
    <select name="sort" id="sortSelect">
        {Object.keys(sortOptions).map(key => {
            return <option value={key}>{sortOptions[key as SortType].name}</option>
        })}
    </select>
</div>

<script>
    const sortSelect = document.getElementById('sortSelect') as HTMLSelectElement;

    const currentOption = new URLSearchParams(window.location.search).get('sort');
    if (currentOption) {
        (sortSelect.querySelector(`option[value=${currentOption}]`) as HTMLOptionElement).selected = true;
    }

    sortSelect?.addEventListener('change',(e) => {
        const searchParams = new URLSearchParams(window.location.search);
        searchParams.set('sort',sortSelect.value);
        window.location.search = searchParams.toString();
    });
</script>

<style>
    .sortContainer {
        display: flex;
        flex-direction: row;
        justify-content: right;
        gap: var(--spacing-base);
        margin-bottom: var(--spacing-base);

        select {
            width: auto;
            margin: 0;
        }
        label {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
        }
    }
</style>