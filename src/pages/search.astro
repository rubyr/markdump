---
import BaseLayout from '../layouts/base-layout.astro';
import { supabase } from '../util/supabase.astro';
import Pagination from '../components/pagination.astro';
import PostList from '../components/post-list.astro';
import Seo from '../components/seo.astro';
import SortBy, { sortPostQuery, type SortType } from '../components/sort-by/sort-by';

const query = Astro.url.searchParams.get('q') ?? '';

const pageStr = Astro.url.searchParams.get('p') ?? '1';
const pageIndex = (parseInt(pageStr) || 1) - 1;

const sortBy = Astro.url.searchParams.get('sort') ?? 'newest';

const RESULTS_PER_PAGE = 20;

let dbQuery = supabase()
    .from('posts')
    .select('title, created_at, tags, id')
    .eq('unlisted', false)
    .ilike('title', `%${query}%`) // TODO: this is far from a robust search system
sortPostQuery(dbQuery, sortBy as SortType);
const { data: posts, error: postsError } = await dbQuery.range(
        pageIndex * RESULTS_PER_PAGE,
        pageIndex * RESULTS_PER_PAGE + (RESULTS_PER_PAGE - 1)
    );

const { count: total } = await supabase()
    .from('posts')
    .select('*', { count: 'exact', head: true })
    .eq('unlisted', false)
    .ilike('title', `%${query}%`)

const totalPages = Math.ceil((total ?? 1) / RESULTS_PER_PAGE);
---

<BaseLayout title={`Search "${query}"`}>
    <Seo title='Markdump' description={`Search for ${query}`} />
    {query.length > 0 && <h1>Search results for "{query}"</h1>}
    {query.length == 0 && <h1>All posts</h1>}
    <SortBy client:only="preact"/>
    {(posts?.length ?? 0) > 4 && <Pagination page={pageIndex} totalPages={totalPages} />}
    <PostList posts={posts} />
    <Pagination page={pageIndex} totalPages={totalPages}/>
</BaseLayout>
